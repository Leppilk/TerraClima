"""
P√°gina 2: Gr√°ficos Categorizados
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import sys
from pathlib import Path

# Adicionar diret√≥rio raiz ao path
root_dir = Path(__file__).parent.parent.parent
sys.path.insert(0, str(root_dir))


def show_temperature_charts(df_daily):
    """Gr√°ficos de temperatura."""
    st.markdown("### üå°Ô∏è An√°lise de Temperatura")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Evolu√ß√£o temporal
        fig = go.Figure()
        
        if 'temperatura_max' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['temperatura_max'],
                name='M√°xima',
                line=dict(color='red')
            ))
        
        if 'temperatura_media' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['temperatura_media'],
                name='M√©dia',
                line=dict(color='orange')
            ))
        
        if 'temperatura_min' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['temperatura_min'],
                name='M√≠nima',
                line=dict(color='blue')
            ))
        
        fig.update_layout(
            title="Evolu√ß√£o da Temperatura",
            xaxis_title="Data",
            yaxis_title="Temperatura (¬∞C)",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribui√ß√£o (boxplot)
        fig = go.Figure()
        
        for col, name in [('temperatura_max', 'M√°xima'), ('temperatura_media', 'M√©dia'), ('temperatura_min', 'M√≠nima')]:
            if col in df_daily.columns:
                fig.add_trace(go.Box(
                    y=df_daily[col],
                    name=name
                ))
        
        fig.update_layout(
            title="Distribui√ß√£o de Temperatura",
            yaxis_title="Temperatura (¬∞C)"
        )
        
        st.plotly_chart(fig, use_container_width=True)


def show_humidity_charts(df_daily):
    """Gr√°ficos de umidade."""
    st.markdown("### üíß An√°lise de Umidade")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Evolu√ß√£o temporal
        fig = go.Figure()
        
        if 'umidade_max' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['umidade_max'],
                name='M√°xima',
                line=dict(color='darkblue')
            ))
        
        if 'umidade_media' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['umidade_media'],
                name='M√©dia',
                line=dict(color='blue')
            ))
        
        if 'umidade_min' in df_daily.columns:
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['umidade_min'],
                name='M√≠nima',
                line=dict(color='lightblue')
            ))
        
        fig.update_layout(
            title="Evolu√ß√£o da Umidade",
            xaxis_title="Data",
            yaxis_title="Umidade (%)",
            hovermode='x unified'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Histograma
        if 'umidade_media' in df_daily.columns:
            fig = px.histogram(
                df_daily,
                x='umidade_media',
                nbins=30,
                title="Distribui√ß√£o da Umidade M√©dia"
            )
            fig.update_layout(
                xaxis_title="Umidade (%)",
                yaxis_title="Frequ√™ncia"
            )
            st.plotly_chart(fig, use_container_width=True)


def show_rain_charts(df_daily, df_monthly):
    """Gr√°ficos de chuva."""
    st.markdown("### üåßÔ∏è An√°lise de Precipita√ß√£o")
    
    # Encontrar coluna de chuva
    chuva_col = None
    for col in ['chuva_total', 'chuva_dia', 'precipitacao']:
        if col in df_daily.columns:
            chuva_col = col
            break
    
    if not chuva_col:
        st.info("üìä Dados de precipita√ß√£o n√£o dispon√≠veis")
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Chuva di√°ria
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=df_daily['data'],
            y=df_daily[chuva_col],
            name='Precipita√ß√£o',
            marker_color='steelblue'
        ))
        
        fig.update_layout(
            title="Precipita√ß√£o Di√°ria",
            xaxis_title="Data",
            yaxis_title="Chuva (mm)"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Chuva acumulada
        df_daily_copy = df_daily.copy()
        df_daily_copy['chuva_acumulada'] = df_daily_copy[chuva_col].cumsum()
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df_daily_copy['data'],
            y=df_daily_copy['chuva_acumulada'],
            name='Acumulada',
            line=dict(color='darkblue', width=2),
            fill='tozeroy'
        ))
        
        fig.update_layout(
            title="Precipita√ß√£o Acumulada",
            xaxis_title="Data",
            yaxis_title="Chuva Acumulada (mm)"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Chuva mensal
    if df_monthly is not None and 'mes_nome' in df_monthly.columns:
        # Encontrar coluna de chuva mensal
        chuva_mensal_col = None
        for col in df_monthly.columns:
            if 'chuva' in col.lower() and ('sum' in col or 'total' in col):
                chuva_mensal_col = col
                break
        
        if chuva_mensal_col:
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=df_monthly['mes_nome'],
                y=df_monthly[chuva_mensal_col],
                marker_color='teal'
            ))
            
            fig.update_layout(
                title="Precipita√ß√£o Mensal",
                xaxis_title="M√™s",
                yaxis_title="Chuva Total (mm)"
            )
            
            st.plotly_chart(fig, use_container_width=True)


def show_wind_charts(df_daily):
    """Gr√°ficos de vento."""
    st.markdown("### üí® An√°lise de Vento")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Velocidade do vento
        if 'velocidade_vento_media' in df_daily.columns:
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['velocidade_vento_media'],
                name='Velocidade M√©dia',
                line=dict(color='green')
            ))
            
            if 'velocidade_vento_max' in df_daily.columns:
                fig.add_trace(go.Scatter(
                    x=df_daily['data'],
                    y=df_daily['velocidade_vento_max'],
                    name='Rajada M√°xima',
                    line=dict(color='darkgreen', dash='dash')
                ))
            
            fig.update_layout(
                title="Velocidade do Vento",
                xaxis_title="Data",
                yaxis_title="Velocidade (km/h)"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribui√ß√£o da velocidade
        if 'velocidade_vento_media' in df_daily.columns:
            fig = px.histogram(
                df_daily,
                x='velocidade_vento_media',
                nbins=20,
                title="Distribui√ß√£o da Velocidade do Vento"
            )
            fig.update_layout(
                xaxis_title="Velocidade (km/h)",
                yaxis_title="Frequ√™ncia"
            )
            st.plotly_chart(fig, use_container_width=True)


def show_solar_charts(df_daily):
    """Gr√°ficos de radia√ß√£o solar."""
    st.markdown("### ‚òÄÔ∏è An√°lise de Radia√ß√£o Solar")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Radia√ß√£o solar
        if 'radiacao_solar_total' in df_daily.columns:
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['radiacao_solar_total'],
                name='Radia√ß√£o Total',
                line=dict(color='orange'),
                fill='tozeroy'
            ))
            
            fig.update_layout(
                title="Radia√ß√£o Solar Di√°ria",
                xaxis_title="Data",
                yaxis_title="Radia√ß√£o (W/m¬≤)"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # √çndice UV
        if 'indice_uv' in df_daily.columns:
            fig = go.Figure()
            
            fig.add_trace(go.Scatter(
                x=df_daily['data'],
                y=df_daily['indice_uv'],
                name='√çndice UV',
                mode='markers+lines',
                marker=dict(size=6, color=df_daily['indice_uv'], colorscale='Reds')
            ))
            
            fig.update_layout(
                title="√çndice UV Di√°rio",
                xaxis_title="Data",
                yaxis_title="√çndice UV"
            )
            
            st.plotly_chart(fig, use_container_width=True)


def show_pressure_charts(df_daily):
    """Gr√°ficos de press√£o atmosf√©rica."""
    st.markdown("### üåê An√°lise de Press√£o Atmosf√©rica")
    
    if 'pressao_atmosferica' not in df_daily.columns:
        st.info("üìä Dados de press√£o atmosf√©rica n√£o dispon√≠veis")
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Evolu√ß√£o da press√£o
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=df_daily['data'],
            y=df_daily['pressao_atmosferica'],
            name='Press√£o',
            line=dict(color='purple')
        ))
        
        fig.update_layout(
            title="Press√£o Atmosf√©rica",
            xaxis_title="Data",
            yaxis_title="Press√£o (hPa)"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribui√ß√£o
        fig = px.histogram(
            df_daily,
            x='pressao_atmosferica',
            nbins=30,
            title="Distribui√ß√£o da Press√£o Atmosf√©rica"
        )
        fig.update_layout(
            xaxis_title="Press√£o (hPa)",
            yaxis_title="Frequ√™ncia"
        )
        st.plotly_chart(fig, use_container_width=True)


def show(df_daily, df_monthly):
    """Fun√ß√£o principal da p√°gina de gr√°ficos."""
    
    # Cabe√ßalho
    st.markdown('<p class="main-header">üìà Gr√°ficos Meteorol√≥gicos</p>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">An√°lises visuais detalhadas por categoria</p>', unsafe_allow_html=True)
    
    # Tabs para diferentes categorias
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üå°Ô∏è Temperatura",
        "üíß Umidade",
        "üåßÔ∏è Chuva",
        "üí® Vento",
        "‚òÄÔ∏è Solar",
        "üåê Press√£o"
    ])
    
    with tab1:
        show_temperature_charts(df_daily)
    
    with tab2:
        show_humidity_charts(df_daily)
    
    with tab3:
        show_rain_charts(df_daily, df_monthly)
    
    with tab4:
        show_wind_charts(df_daily)
    
    with tab5:
        show_solar_charts(df_daily)
    
    with tab6:
        show_pressure_charts(df_daily)
