"""
P√°gina de An√°lise Hist√≥rica de Chuva
Dados integrados: Sr. Luiz (1995-2025) + Esta√ß√£o Weathercloud (2025)
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import json
from pathlib import Path
from datetime import datetime

# Caminhos
BASE_DIR = Path(__file__).parent.parent.parent
DADOS_PATH = BASE_DIR / "Dados" / "precipitacao_integrada_1995_2025.csv"
STATS_PATH = BASE_DIR / "Dados" / "estatisticas_chuva.json"


@st.cache_data
def carregar_dados():
    """Carrega dados integrados de precipita√ß√£o."""
    df = pd.read_csv(DADOS_PATH, parse_dates=['data'])
    
    # Carregar estat√≠sticas
    with open(STATS_PATH, 'r', encoding='utf-8') as f:
        stats = json.load(f)
    
    return df, stats


def grafico_distribuicao_principal(df):
    """Gr√°fico principal: heatmap de precipita√ß√£o (ano x m√™s)."""
    
    # Criar pivot table: anos nas linhas, meses nas colunas
    df_pivot = df.pivot_table(
        values='precipitacao_mm',
        index='ano',
        columns='mes',
        aggfunc='sum'
    )
    
    # Nomes dos meses
    meses_nomes = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 
                   'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    
    fig = go.Figure(data=go.Heatmap(
        z=df_pivot.values,
        x=meses_nomes,
        y=df_pivot.index,
        colorscale=[
            [0.0, '#ffffcc'],   # Amarelo claro (seco - pouca chuva)
            [0.25, '#a1dab4'],  # Verde claro
            [0.5, '#41b6c4'],   # Azul ciano
            [0.75, '#2c7fb8'],  # Azul m√©dio
            [1.0, '#253494']    # Azul escuro (muito chuvoso)
        ],
        colorbar=dict(
            title="Precipita√ß√£o<br>(mm)",
            thickness=20,
            len=0.7,
            x=1.02,
            tickvals=[0, 150, 300, 450, 600],
            ticktext=['0', '150', '300', '450', '600+']
        ),
        hovertemplate='<b>%{y} - %{x}</b><br>Precipita√ß√£o: %{z:.1f}mm<extra></extra>',
        text=df_pivot.values,
        texttemplate='%{z:.0f}',
        textfont={"size": 8, "color": "rgba(0,0,0,0.6)"},
        showscale=True
    ))
    
    fig.update_layout(
        title={
            'text': 'üåßÔ∏è Mapa de Calor da Precipita√ß√£o (1995-2025)',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 20, 'color': '#2c3e50'}
        },
        xaxis_title='M√™s',
        yaxis_title='Ano',
        height=700,
        template='plotly_white',
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        xaxis=dict(side='top'),
        yaxis=dict(autorange='reversed')  # Anos mais recentes no topo
    )
    
    return fig


def grafico_barras_temporal(df):
    """Gr√°fico de barras coloridas por intensidade ao longo do tempo."""
    
    df_plot = df.copy()
    
    fig = go.Figure()
    
    # Barras coloridas
    fig.add_trace(go.Bar(
        x=df_plot['data'],
        y=df_plot['precipitacao_mm'],
        marker=dict(
            color=df_plot['precipitacao_mm'],
            colorscale=[
                [0.0, '#ecf0f1'],   # Cinza claro (0-100mm)
                [0.33, '#3498db'],  # Azul (100-200mm)
                [0.66, '#f39c12'],  # Laranja (200-300mm)
                [1.0, '#e74c3c']    # Vermelho (>300mm)
            ],
            showscale=True,
            colorbar=dict(
                title="mm",
                thickness=15,
                len=0.7,
                x=1.02
            )
        ),
        hovertemplate='<b>%{x|%b/%Y}</b><br>Precipita√ß√£o: %{y:.1f}mm<extra></extra>',
        name='Precipita√ß√£o'
    ))
    
    # Linha de m√©dia m√≥vel
    df_plot['media_movel'] = df_plot['precipitacao_mm'].rolling(window=12, center=True).mean()
    fig.add_trace(go.Scatter(
        x=df_plot['data'],
        y=df_plot['media_movel'],
        mode='lines',
        name='Tend√™ncia (12 meses)',
        line=dict(color='#2c3e50', width=3),
        hovertemplate='<b>M√©dia m√≥vel</b><br>%{y:.1f}mm<extra></extra>'
    ))
    
    fig.update_layout(
        title={
            'text': 'üìä S√©rie Temporal Completa - Precipita√ß√£o Mensal',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18, 'color': '#2c3e50'}
        },
        xaxis_title='Per√≠odo',
        yaxis_title='Precipita√ß√£o (mm)',
        hovermode='x unified',
        template='plotly_white',
        height=450,
        showlegend=True,
        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='right', x=1),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(0,0,0,0.05)')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(0,0,0,0.1)')
    
    return fig


def grafico_anual_barras(df):
    """Gr√°fico de barras: total anual de precipita√ß√£o."""
    
    df_anual = df.groupby('ano')['precipitacao_mm'].sum().reset_index()
    df_anual.columns = ['ano', 'total']
    
    # M√©dia geral
    media_geral = df_anual['total'].mean()
    
    # Cores baseadas em acima/abaixo da m√©dia
    cores = ['#e74c3c' if x > media_geral else '#3498db' for x in df_anual['total']]
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_anual['ano'],
        y=df_anual['total'],
        marker=dict(color=cores),
        hovertemplate='<b>%{x}</b><br>Total: %{y:.0f}mm<extra></extra>',
        name='Precipita√ß√£o Anual'
    ))
    
    # Linha de m√©dia
    fig.add_hline(
        y=media_geral, 
        line_dash="dash", 
        line_color="#2c3e50", 
        line_width=2,
        annotation_text=f"M√©dia: {media_geral:.0f}mm",
        annotation_position="right"
    )
    
    fig.update_layout(
        title={
            'text': 'üìà Precipita√ß√£o Total por Ano',
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18, 'color': '#2c3e50'}
        },
        xaxis_title='Ano',
        yaxis_title='Precipita√ß√£o Total (mm)',
        template='plotly_white',
        height=450,
        showlegend=False,
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
    )
    
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(0,0,0,0.05)', dtick=2)
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(0,0,0,0.1)')
    
    return fig


def grafico_comparacao_estacoes(df):
    """Gr√°fico: compara√ß√£o entre as 4 esta√ß√µes do ano."""
    
    # Definir esta√ß√µes
    def get_estacao(mes):
        if mes in [12, 1, 2]:
            return 'Ver√£o'
        elif mes in [3, 4, 5]:
            return 'Outono'
        elif mes in [6, 7, 8]:
            return 'Inverno'
        else:
            return 'Primavera'
    
    df['estacao'] = df['mes'].apply(get_estacao)
    
    # Agregar por esta√ß√£o
    df_estacoes = df.groupby('estacao')['precipitacao_mm'].sum().reset_index()
    ordem = ['Ver√£o', 'Outono', 'Inverno', 'Primavera']
    df_estacoes['estacao'] = pd.Categorical(df_estacoes['estacao'], categories=ordem, ordered=True)
    df_estacoes = df_estacoes.sort_values('estacao')
    
    # Cores por esta√ß√£o
    cores = {'Ver√£o': '#e74c3c', 'Outono': '#f39c12', 'Inverno': '#3498db', 'Primavera': '#2ecc71'}
    df_estacoes['cor'] = df_estacoes['estacao'].map(cores)
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_estacoes['estacao'],
        y=df_estacoes['precipitacao_mm'],
        marker=dict(color=df_estacoes['cor']),
        text=df_estacoes['precipitacao_mm'].round(0),
        textposition='outside',
        texttemplate='%{text:.0f}mm',
        hovertemplate='<b>%{x}</b><br>Total: %{y:.0f}mm<extra></extra>'
    ))
    
    fig.update_layout(
        title={'text': 'üå¶Ô∏è Qual Esta√ß√£o do Ano Chove Mais?', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 18}},
        xaxis_title='Esta√ß√£o do Ano',
        yaxis_title='Precipita√ß√£o Total (mm) - 31 anos',
        template='plotly_white',
        height=450,
        showlegend=False
    )
    
    return fig


def grafico_top_meses(df):
    """Gr√°fico: Top 10 meses mais chuvosos da hist√≥ria."""
    
    df_sorted = df.nlargest(10, 'precipitacao_mm').copy()
    df_sorted['label'] = df_sorted['data'].dt.strftime('%b/%Y')
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_sorted['label'],
        y=df_sorted['precipitacao_mm'],
        marker=dict(
            color=df_sorted['precipitacao_mm'],
            colorscale='Blues',
            showscale=False
        ),
        text=df_sorted['precipitacao_mm'].round(0),
        textposition='outside',
        texttemplate='%{text:.0f}mm',
        hovertemplate='<b>%{x}</b><br>%{y:.0f}mm<extra></extra>'
    ))
    
    fig.update_layout(
        title={'text': 'üèÜ Top 10 Meses Mais Chuvosos', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 18}},
        xaxis_title='M√™s/Ano',
        yaxis_title='Precipita√ß√£o (mm)',
        template='plotly_white',
        height=450,
        showlegend=False
    )
    
    return fig


def grafico_media_mensal_simples(df):
    """Gr√°fico: m√©dia de chuva em cada m√™s do ano (simplificado)."""
    
    df_mensal = df.groupby('mes')['precipitacao_mm'].mean().reset_index()
    meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez']
    df_mensal['mes_nome'] = df_mensal['mes'].map(dict(enumerate(meses, 1)))
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df_mensal['mes_nome'],
        y=df_mensal['precipitacao_mm'],
        mode='lines+markers',
        line=dict(color='#3498db', width=4),
        marker=dict(size=12, color='#2c3e50'),
        fill='tozeroy',
        fillcolor='rgba(52, 152, 219, 0.2)',
        hovertemplate='<b>%{x}</b><br>M√©dia: %{y:.1f}mm<extra></extra>'
    ))
    
    fig.update_layout(
        title={'text': 'üìÖ Qual M√™s Costuma Chover Mais?', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 18}},
        xaxis_title='M√™s',
        yaxis_title='M√©dia de Precipita√ß√£o (mm)',
        template='plotly_white',
        height=450,
        showlegend=False
    )
    
    return fig


def grafico_anos_extremos(df):
    """Gr√°fico: compara√ß√£o dos anos mais e menos chuvosos."""
    
    df_anual = df.groupby('ano')['precipitacao_mm'].sum().reset_index()
    df_anual.columns = ['ano', 'total']
    
    # Top 5 mais chuvosos e menos chuvosos
    top5_mais = df_anual.nlargest(5, 'total').copy()
    top5_menos = df_anual.nsmallest(5, 'total').copy()
    
    top5_mais['tipo'] = 'Mais Chuvosos'
    top5_menos['tipo'] = 'Menos Chuvosos'
    
    df_extremos = pd.concat([top5_mais, top5_menos])
    
    fig = go.Figure()
    
    # Mais chuvosos
    fig.add_trace(go.Bar(
        name='Mais Chuvosos',
        x=top5_mais['ano'].astype(str),
        y=top5_mais['total'],
        marker_color='#3498db',
        text=top5_mais['total'].round(0),
        textposition='outside',
        texttemplate='%{text:.0f}mm'
    ))
    
    # Menos chuvosos
    fig.add_trace(go.Bar(
        name='Menos Chuvosos',
        x=top5_menos['ano'].astype(str),
        y=top5_menos['total'],
        marker_color='#f39c12',
        text=top5_menos['total'].round(0),
        textposition='outside',
        texttemplate='%{text:.0f}mm'
    ))
    
    fig.update_layout(
        title={'text': '‚öñÔ∏è Anos Extremos: Mais e Menos Chuvosos', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 18}},
        xaxis_title='Ano',
        yaxis_title='Precipita√ß√£o Total (mm)',
        template='plotly_white',
        height=450,
        barmode='group',
        legend=dict(orientation='h', yanchor='bottom', y=1.02, xanchor='center', x=0.5)
    )
    
    return fig


def grafico_decadas_simples(df):
    """Gr√°fico: quanto choveu em cada d√©cada (simplificado)."""
    
    df['decada'] = (df['ano'] // 10) * 10
    df_decadas = df.groupby('decada')['precipitacao_mm'].sum().reset_index()
    df_decadas['decada_label'] = df_decadas['decada'].astype(str) + 's'
    
    # Calcular m√©dia por d√©cada
    df_decadas['media'] = df_decadas['precipitacao_mm'] / 10  # Aproximado
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_decadas['decada_label'],
        y=df_decadas['precipitacao_mm'],
        marker=dict(
            color=df_decadas['precipitacao_mm'],
            colorscale='Viridis',
            showscale=False
        ),
        text=df_decadas['precipitacao_mm'].round(0),
        textposition='outside',
        texttemplate='%{text:.0f}mm',
        hovertemplate='<b>%{x}</b><br>Total: %{y:.0f}mm<extra></extra>'
    ))
    
    fig.update_layout(
        title={'text': 'üìä Como Mudou a Chuva nas √öltimas D√©cadas?', 'x': 0.5, 'xanchor': 'center', 'font': {'size': 18}},
        xaxis_title='D√©cada',
        yaxis_title='Precipita√ß√£o Total (mm)',
        template='plotly_white',
        height=450,
        showlegend=False
    )
    
    return fig


def cards_curiosidades(stats):
    """Cards com m√©tricas importantes dos dados hist√≥ricos."""
    
    col1, col2, col3, col4 = st.columns(4)
    
    # Card 1: Total Acumulado
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    padding: 20px; border-radius: 10px; color: white;'>
            <h3 style='margin:0; font-size: 16px;'>üíß Total Acumulado</h3>
            <p style='font-size: 24px; font-weight: bold; margin: 10px 0;'>{:.1f} m</p>
            <p style='font-size: 14px; margin:0; opacity: 0.9;'>31 anos de dados</p>
        </div>
        """.format(stats['total_acumulado'] / 1000), unsafe_allow_html=True)
    
    # Card 2: M√™s mais chuvoso
    with col2:
        mes_info = stats['mes_mais_chuvoso']
        st.markdown("""
        <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    padding: 20px; border-radius: 10px; color: white;'>
            <h3 style='margin:0; font-size: 16px;'>üåßÔ∏è M√™s Mais Chuvoso</h3>
            <p style='font-size: 24px; font-weight: bold; margin: 10px 0;'>{:.0f} mm</p>
            <p style='font-size: 14px; margin:0; opacity: 0.9;'>{}/{}</p>
        </div>
        """.format(mes_info['valor'], mes_info['mes'], mes_info['ano']), unsafe_allow_html=True)
    
    # Card 3: Ano mais chuvoso
    with col3:
        ano_info = stats['ano_mais_chuvoso']
        st.markdown("""
        <div style='background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); 
                    padding: 20px; border-radius: 10px; color: white;'>
            <h3 style='margin:0; font-size: 16px;'>üìÖ Ano Mais Chuvoso</h3>
            <p style='font-size: 24px; font-weight: bold; margin: 10px 0;'>{:.0f} mm</p>
            <p style='font-size: 14px; margin:0; opacity: 0.9;'>Ano {}</p>
        </div>
        """.format(ano_info['total'], ano_info['ano']), unsafe_allow_html=True)
    
    # Card 4: Maior per√≠odo seco
    with col4:
        duracao = stats['maior_seca']['duracao_meses']
        st.markdown("""
        <div style='background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); 
                    padding: 20px; border-radius: 10px; color: white;'>
            <h3 style='margin:0; font-size: 16px;'>üåµ Maior Per√≠odo Seco</h3>
            <p style='font-size: 24px; font-weight: bold; margin: 10px 0;'>{} meses</p>
            <p style='font-size: 14px; margin:0; opacity: 0.9;'>Consecutivos <10mm</p>
        </div>
        """.format(duracao), unsafe_allow_html=True)


def cards_comparacoes(stats, df):
    """Cards com compara√ß√µes e curiosidades interessantes sobre os dados."""
    
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("### üí° Curiosidades sobre os Dados")
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Calcular dados necess√°rios
    media_janeiro = df[df['mes_nome'] == 'Jan']['precipitacao_mm'].mean()
    media_julho = df[df['mes_nome'] == 'Jul']['precipitacao_mm'].mean()
    vezes_mais = media_janeiro / media_julho
    
    col1, col2 = st.columns(2)
    
    # Card 1: Compara√ß√£o com Deserto do Atacama
    with col1:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); 
                    padding: 35px; 
                    border-radius: 15px; 
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                    height: 200px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    text-align: center;'>
            <p style='color: #ecf0f1; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;'>
                üèúÔ∏è Ribeir√£o Claro recebe em <strong>1 ano</strong> o que o Deserto do Atacama 
                (lugar mais seco do mundo) recebe em
            </p>
            <p style='color: #f39c12; font-size: 56px; font-weight: 900; margin: 0; line-height: 1;'>
                100 anos
            </p>
            <p style='color: #bdc3c7; font-size: 13px; margin: 15px 0 0 0;'>
                Atacama: ~15mm/ano
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Card 2: Volume em campo de futebol
    with col2:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%); 
                    padding: 35px; 
                    border-radius: 15px; 
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                    height: 200px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    text-align: center;'>
            <p style='color: #ecf0f1; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;'>
                ‚öΩ Se os <strong>50,5 metros</strong> de chuva ca√≠ssem sobre um campo de futebol oficial, 
                ter√≠amos
            </p>
            <p style='color: #3498db; font-size: 56px; font-weight: 900; margin: 0; line-height: 1;'>
                360 milh√µes
            </p>
            <p style='color: #bdc3c7; font-size: 13px; margin: 15px 0 0 0;'>
                de litros (144 piscinas ol√≠mpicas)
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    col3, col4 = st.columns(2)
    
    # Card 3: Intensidade recorde
    with col3:
        st.markdown("""
        <div style='background: linear-gradient(135deg, #833ab4 0%, #fd1d1d 100%); 
                    padding: 35px; 
                    border-radius: 15px; 
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                    height: 200px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    text-align: center;'>
            <p style='color: #ecf0f1; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0;'>
                ‚ö° O m√™s mais chuvoso (<strong>Janeiro/2005</strong>) registrou mais que 
                a precipita√ß√£o anual de Lisboa
            </p>
            <p style='color: #fff; font-size: 56px; font-weight: 900; margin: 0; line-height: 1; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);'>
                600mm
            </p>
            <p style='color: #f8f9fa; font-size: 13px; margin: 15px 0 0 0;'>
                em 1 m√™s (Lisboa: 774mm/ano)
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    # Card 4: Padr√£o sazonal
    with col4:
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); 
                    padding: 35px; 
                    border-radius: 15px; 
                    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
                    height: 200px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    text-align: center;'>
            <p style='color: #1a1a1a; font-size: 16px; line-height: 1.6; margin: 0 0 20px 0; font-weight: 500;'>
                üå¶Ô∏è <strong>Janeiro</strong> (ver√£o) chove muito mais que <strong>Julho</strong> (inverno). 
                O ver√£o concentra 38% da chuva anual
            </p>
            <p style='color: #0d5943; font-size: 56px; font-weight: 900; margin: 0; line-height: 1;'>
                {vezes_mais:.1f}x
            </p>
            <p style='color: #1a4d3a; font-size: 13px; margin: 15px 0 0 0; font-weight: 600;'>
                Jan: {media_janeiro:.0f}mm ‚Ä¢ Jul: {media_julho:.0f}mm
            </p>
        </div>
        """, unsafe_allow_html=True)


def grafico_sazonalidade(df):
    """Gr√°fico de padr√£o sazonal."""
    
    # Calcular m√©dia por m√™s do ano
    df_mensal = df.groupby('mes')['precipitacao_mm'].agg(['mean', 'std']).reset_index()
    df_mensal['mes_nome'] = df_mensal['mes'].map({
        1: 'Jan', 2: 'Fev', 3: 'Mar', 4: 'Abr', 5: 'Mai', 6: 'Jun',
        7: 'Jul', 8: 'Ago', 9: 'Set', 10: 'Out', 11: 'Nov', 12: 'Dez'
    })
    
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        x=df_mensal['mes_nome'],
        y=df_mensal['mean'],
        error_y=dict(type='data', array=df_mensal['std'], visible=True),
        marker_color='#3498db',
        name='M√©dia Mensal'
    ))
    
    fig.update_layout(
        title='Padr√£o Sazonal de Precipita√ß√£o',
        xaxis_title='M√™s',
        yaxis_title='Precipita√ß√£o M√©dia (mm)',
        template='plotly_white',
        height=400,
        showlegend=False
    )
    
    return fig


def grafico_decadas(df):
    """An√°lise por d√©cadas."""
    
    df['decada'] = (df['ano'] // 10) * 10
    df_decadas = df.groupby('decada')['precipitacao_mm'].agg(['sum', 'mean', 'count']).reset_index()
    df_decadas['decada_label'] = df_decadas['decada'].astype(str) + 's'
    
    fig = make_subplots(
        rows=1, cols=2,
        subplot_titles=('Total por D√©cada', 'M√©dia Mensal por D√©cada')
    )
    
    # Total por d√©cada
    fig.add_trace(
        go.Bar(
            x=df_decadas['decada_label'],
            y=df_decadas['sum'],
            marker_color='#2ecc71',
            name='Total'
        ),
        row=1, col=1
    )
    
    # M√©dia por d√©cada
    fig.add_trace(
        go.Bar(
            x=df_decadas['decada_label'],
            y=df_decadas['mean'],
            marker_color='#e74c3c',
            name='M√©dia'
        ),
        row=1, col=2
    )
    
    fig.update_layout(
        title_text='An√°lise por D√©cada',
        template='plotly_white',
        height=400,
        showlegend=False
    )
    
    fig.update_yaxes(title_text='Precipita√ß√£o Total (mm)', row=1, col=1)
    fig.update_yaxes(title_text='Precipita√ß√£o M√©dia (mm)', row=1, col=2)
    
    return fig


def grafico_tendencia(df):
    """Gr√°fico de tend√™ncia anual."""
    
    df_anual = df.groupby('ano')['precipitacao_mm'].sum().reset_index()
    
    # Calcular tend√™ncia linear
    from scipy.stats import linregress
    slope, intercept, r_value, p_value, std_err = linregress(df_anual['ano'], df_anual['precipitacao_mm'])
    df_anual['tendencia'] = slope * df_anual['ano'] + intercept
    
    fig = go.Figure()
    
    # Barras anuais
    fig.add_trace(go.Bar(
        x=df_anual['ano'],
        y=df_anual['precipitacao_mm'],
        marker_color='#3498db',
        name='Precipita√ß√£o Anual',
        opacity=0.7
    ))
    
    # Linha de tend√™ncia
    fig.add_trace(go.Scatter(
        x=df_anual['ano'],
        y=df_anual['tendencia'],
        mode='lines',
        line=dict(color='#e74c3c', width=3),
        name=f'Tend√™ncia (R¬≤={r_value**2:.3f})'
    ))
    
    fig.update_layout(
        title='Tend√™ncia Anual de Precipita√ß√£o',
        xaxis_title='Ano',
        yaxis_title='Precipita√ß√£o Total (mm)',
        template='plotly_white',
        height=400,
        showlegend=True,
        legend=dict(
            orientation='h',
            yanchor='bottom',
            y=1.02,
            xanchor='right',
            x=1
        )
    )
    
    return fig


def show():
    """Fun√ß√£o principal da p√°gina."""
    
    st.title("üåßÔ∏è An√°lise Hist√≥rica de Chuvas")
    st.markdown("### Ribeir√£o Claro - PR (1995-2025)")
    st.markdown("---")
    
    # Carregar dados
    df, stats = carregar_dados()
    
    # Adicionar colunas auxiliares
    df['ano'] = df['data'].dt.year
    df['mes'] = df['data'].dt.month
    df['mes_nome'] = df['data'].dt.strftime('%b')
    
    # Introdu√ß√£o
    st.markdown("""
    Esta p√°gina apresenta uma an√°lise detalhada de **31 anos de dados de precipita√ß√£o** 
    em Ribeir√£o Claro, Paran√°. 
    
    Gra√ßas √† dedica√ß√£o do **Sr. Luiz**, que com paci√™ncia e compromisso registrou 
    manualmente cada dia de chuva durante mais de tr√™s d√©cadas, temos hoje esse 
    valioso arquivo hist√≥rico (1995-2025). Seu trabalho meticuloso nos permite 
    compreender os padr√µes clim√°ticos da nossa regi√£o.
    """, unsafe_allow_html=True)
    
    # Cards de curiosidades
    cards_curiosidades(stats)
    
    # Cards de compara√ß√µes
    cards_comparacoes(stats, df)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Gr√°fico principal: Heatmap
    st.markdown("## üìä Visualiza√ß√µes dos Dados")
    fig_heat = grafico_distribuicao_principal(df)
    st.plotly_chart(fig_heat, use_container_width=True)
    
    st.markdown("---")
    
    # Gr√°ficos alternativos em abas
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
        "üìä S√©rie Temporal", 
        "üìà Totais Anuais", 
        "üå¶Ô∏è Esta√ß√µes do Ano",
        "üèÜ Top 10 Meses",
        "üìÖ M√©dia Mensal",
        "‚öñÔ∏è Anos Extremos",
        "üìä D√©cadas"
    ])
    
    with tab1:
        st.markdown("### Evolu√ß√£o Mensal Completa")
        fig_barras = grafico_barras_temporal(df)
        st.plotly_chart(fig_barras, use_container_width=True)
    
    with tab2:
        st.markdown("### Precipita√ß√£o Total por Ano")
        fig_anual = grafico_anual_barras(df)
        st.plotly_chart(fig_anual, use_container_width=True)
    
    with tab3:
        st.markdown("### Compara√ß√£o entre Esta√ß√µes do Ano")
        fig_estacoes = grafico_comparacao_estacoes(df)
        st.plotly_chart(fig_estacoes, use_container_width=True)
    
    with tab4:
        st.markdown("### Os 10 Meses Mais Chuvosos da Hist√≥ria")
        fig_top = grafico_top_meses(df)
        st.plotly_chart(fig_top, use_container_width=True)
    
    with tab5:
        st.markdown("### M√©dia de Chuva por M√™s do Ano")
        fig_media = grafico_media_mensal_simples(df)
        st.plotly_chart(fig_media, use_container_width=True)
    
    with tab6:
        st.markdown("### Compara√ß√£o dos Anos Extremos")
        fig_extremos = grafico_anos_extremos(df)
        st.plotly_chart(fig_extremos, use_container_width=True)
    
    with tab7:
        st.markdown("### Evolu√ß√£o ao Longo das D√©cadas")
        fig_decadas_simp = grafico_decadas_simples(df)
        st.plotly_chart(fig_decadas_simp, use_container_width=True)
    
    st.markdown("---")
    
    # Segunda linha: Sazonalidade e D√©cadas
    col1, col2 = st.columns(2)
    
    with col1:
        fig_saz = grafico_sazonalidade(df)
        st.plotly_chart(fig_saz, use_container_width=True)
    
    with col2:
        fig_dec = grafico_decadas(df)
        st.plotly_chart(fig_dec, use_container_width=True)
    
    st.markdown("---")
    
    # Gr√°fico de tend√™ncia
    fig_tend = grafico_tendencia(df)
    st.plotly_chart(fig_tend, use_container_width=True)
    
    # Rodap√© com informa√ß√µes
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #7f8c8d; font-size: 14px;'>
        <p><strong>Fontes de Dados:</strong></p>
        <p>üìä Pluvi√¥metro Sr. Luiz Fonteque (1995-2025) ‚Ä¢ üåê Esta√ß√£o Weathercloud Galinhada (2025)</p>
        <p style='margin-top: 10px; font-size: 12px;'>√öltima atualiza√ß√£o: {}</p>
    </div>
    """.format(datetime.now().strftime("%d/%m/%Y %H:%M")), unsafe_allow_html=True)
